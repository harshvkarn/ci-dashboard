"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _infrastructure = require("../infrastructure");

var ProjectImportExport =
/*#__PURE__*/
function (_BaseService) {
  (0, _inherits2.default)(ProjectImportExport, _BaseService);

  function ProjectImportExport() {
    (0, _classCallCheck2.default)(this, ProjectImportExport);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ProjectImportExport).apply(this, arguments));
  }

  (0, _createClass2.default)(ProjectImportExport, [{
    key: "download",
    value: function download(projectId) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.get(this, "projects/".concat(pId, "/export/download"));
    }
  }, {
    key: "exportStatus",
    value: function exportStatus(projectId) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.get(this, "projects/".concat(pId, "/export"));
    }
  }, {
    key: "import",
    value: function _import(file, path, options) {
      return _infrastructure.RequestHelper.post(this, 'projects/import', (0, _objectSpread2.default)({
        file: file,
        path: path
      }, options));
    }
  }, {
    key: "importStatus",
    value: function importStatus(projectId) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.get(this, "projects/".concat(pId, "/import"));
    }
  }, {
    key: "schedule",
    value: function schedule(projectId, options) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.post(this, "projects/".concat(pId, "/export"), options);
    }
  }]);
  return ProjectImportExport;
}(_infrastructure.BaseService);

var _default = ProjectImportExport;
exports.default = _default;