"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _infrastructure = require("../infrastructure");

var PagesDomains =
/*#__PURE__*/
function (_BaseService) {
  (0, _inherits2.default)(PagesDomains, _BaseService);

  function PagesDomains() {
    (0, _classCallCheck2.default)(this, PagesDomains);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PagesDomains).apply(this, arguments));
  }

  (0, _createClass2.default)(PagesDomains, [{
    key: "all",
    value: function all() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          projectId = _ref.projectId;

      var url = projectId ? "projects/".concat(encodeURIComponent(projectId), "/") : '';
      return _infrastructure.RequestHelper.get(this, "".concat(url, "page/domains"));
    }
  }, {
    key: "create",
    value: function create(projectId, domain, options) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.post(this, "projects/".concat(pId, "/pages/domains"), (0, _objectSpread2.default)({
        domain: domain
      }, options));
    }
  }, {
    key: "edit",
    value: function edit(projectId, domain, options) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.put(this, "projects/".concat(pId, "/pages/domains/").concat(domain), options);
    }
  }, {
    key: "show",
    value: function show(projectId, domain) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.get(this, "projects/".concat(pId, "/pages/domains/").concat(domain));
    }
  }, {
    key: "remove",
    value: function remove(projectId, domain) {
      var pId = encodeURIComponent(projectId);
      return _infrastructure.RequestHelper.delete(this, "projects/".concat(pId, "/pages/domains/").concat(domain));
    }
  }]);
  return PagesDomains;
}(_infrastructure.BaseService);

var _default = PagesDomains;
exports.default = _default;