"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _promise = _interopRequireDefault(require("@babel/runtime/core-js/promise"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _humps = _interopRequireDefault(require("humps"));

var _parseLinkHeader = _interopRequireDefault(require("parse-link-header"));

var _qs = _interopRequireDefault(require("qs"));

var _urlJoin = _interopRequireDefault(require("url-join"));

var _request = _interopRequireDefault(require("request"));

function defaultRequest(_ref, endpoint, _ref2) {
  var url = _ref.url,
      useXMLHttpRequest = _ref.useXMLHttpRequest;
  var headers = _ref2.headers,
      body = _ref2.body,
      qs = _ref2.qs,
      formData = _ref2.formData,
      _ref2$resolveWithFull = _ref2.resolveWithFullResponse,
      resolveWithFullResponse = _ref2$resolveWithFull === void 0 ? false : _ref2$resolveWithFull;
  var params = {
    url: (0, _urlJoin.default)(url, endpoint),
    headers: headers,
    json: true
  };
  if (body) params.body = _humps.default.decamelizeKeys(body);

  if (qs) {
    if (useXMLHttpRequest) {
      // The xhr package doesn't have a way of passing in a qs object until v3
      params.url = (0, _urlJoin.default)(params.url, "?".concat(_qs.default.stringify(_humps.default.decamelizeKeys(qs))));
    } else {
      params.qs = _humps.default.decamelizeKeys(qs);
    }
  }

  if (formData) params.formData = formData;
  params.resolveWithFullResponse = resolveWithFullResponse;
  return params;
}

function getStream(service, endpoint) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (service.useXMLHttpRequest) {
    throw new Error('Cannot use streaming functionality with XMLHttpRequest. Please instantiate without this option to use streaming');
  }

  var requestOptions = defaultRequest(service, endpoint, {
    headers: service.headers,
    qs: options
  });
  return _request.default.get(requestOptions);
}

function wait(_x) {
  return _wait.apply(this, arguments);
}

function _wait() {
  _wait = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(ms) {
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new _promise.default(function (resolve) {
              return setTimeout(resolve, ms);
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _wait.apply(this, arguments);
}

function getPaginated(_x2, _x3) {
  return _getPaginated.apply(this, arguments);
}

function _getPaginated() {
  _getPaginated = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(service, endpoint) {
    var options,
        sleepOnRateLimit,
        showPagination,
        maxPages,
        queryOptions,
        requestOptions,
        response,
        links,
        page,
        underMaxPageLimit,
        more,
        data,
        sleepTime,
        _args3 = arguments;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
            sleepOnRateLimit = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;
            showPagination = options.showPagination, maxPages = options.maxPages, queryOptions = (0, _objectWithoutProperties2.default)(options, ["showPagination", "maxPages"]);
            requestOptions = defaultRequest(service, endpoint, {
              headers: service.headers,
              qs: queryOptions,
              resolveWithFullResponse: true
            });
            _context3.prev = 4;
            _context3.next = 7;
            return service.requester.get(requestOptions);

          case 7:
            response = _context3.sent;
            links = (0, _parseLinkHeader.default)(response.headers.link) || {};
            page = response.headers['x-page'];
            underMaxPageLimit = maxPages ? page < maxPages : true;
            more = [];

            if (!(!queryOptions.page && underMaxPageLimit && links.next)) {
              _context3.next = 19;
              break;
            }

            _context3.next = 15;
            return getPaginated(service, links.next.url.replace(service.url, ''), options);

          case 15:
            more = _context3.sent;
            data = (0, _toConsumableArray2.default)(response.body).concat((0, _toConsumableArray2.default)(more));
            _context3.next = 20;
            break;

          case 19:
            data = response.body;

          case 20:
            if (!(queryOptions.page && showPagination)) {
              _context3.next = 22;
              break;
            }

            return _context3.abrupt("return", {
              data: data,
              pagination: {
                total: response.headers['x-total'],
                next: response.headers['x-next-page'] || null,
                current: response.headers['x-page'] || null,
                previous: response.headers['x-prev-page'] || null,
                perPage: response.headers['x-per-page'],
                totalPages: response.headers['x-total-pages']
              }
            });

          case 22:
            return _context3.abrupt("return", data);

          case 25:
            _context3.prev = 25;
            _context3.t0 = _context3["catch"](4);
            sleepTime = parseInt(_context3.t0.response.headers['retry-after'], 10);

            if (!(sleepOnRateLimit && parseInt(_context3.t0.statusCode, 10) === 429 && sleepTime)) {
              _context3.next = 32;
              break;
            }

            _context3.next = 31;
            return wait(sleepTime * 1000);

          case 31:
            return _context3.abrupt("return", getPaginated(service, endpoint, options, sleepOnRateLimit));

          case 32:
            throw _context3.t0;

          case 33:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[4, 25]]);
  }));
  return _getPaginated.apply(this, arguments);
}

var RequestHelper =
/*#__PURE__*/
function () {
  function RequestHelper() {
    (0, _classCallCheck2.default)(this, RequestHelper);
  }

  (0, _createClass2.default)(RequestHelper, null, [{
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(service, endpoint) {
        var options,
            _ref3,
            _ref3$stream,
            stream,
            _args = arguments;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
                _ref3 = _args.length > 3 && _args[3] !== undefined ? _args[3] : {}, _ref3$stream = _ref3.stream, stream = _ref3$stream === void 0 ? false : _ref3$stream;

                if (!stream) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", getStream(service, endpoint, options));

              case 4:
                return _context.abrupt("return", getPaginated(service, endpoint, options));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function get(_x4, _x5) {
        return _get.apply(this, arguments);
      };
    }()
  }, {
    key: "post",
    value: function post(service, endpoint) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var body = form ? 'formData' : 'body';
      var requestOptions = defaultRequest(service, endpoint, (0, _defineProperty2.default)({
        headers: service.headers
      }, body, options));
      return service.requester.post(requestOptions);
    }
  }, {
    key: "put",
    value: function put(service, endpoint) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var requestOptions = defaultRequest(service, endpoint, {
        headers: service.headers,
        body: options
      });
      return service.requester.put(requestOptions);
    }
  }, {
    key: "delete",
    value: function _delete(service, endpoint) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var requestOptions = defaultRequest(service, endpoint, {
        headers: service.headers,
        qs: options
      });
      return service.requester.delete(requestOptions);
    }
  }]);
  return RequestHelper;
}();

var _default = RequestHelper;
exports.default = _default;